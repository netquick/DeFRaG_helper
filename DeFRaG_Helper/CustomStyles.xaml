<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:DeFRaG_Helper"
                    xmlns:converters="clr-namespace:DeFRaG_Helper.Converters">


    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:BoolToAlignmentConverter x:Key="BoolToAlignmentConverter"/>
    <converters:DynamicSvgConverter x:Key="DynamicSvgConverter"/>
    <converters:SidebarWidthConverter x:Key="SidebarWidthConverter"/>
    <converters:ProgressBarWidthConverter x:Key="ProgressBarWidthConverter"/>
    <converters:LevelToIndentConverter x:Key="LevelToIndentConverter"/>

    <!-- Define DataTemplate for DemoItem -->
    <DataTemplate x:Key="DemoItemTemplate">
        <StackPanel Orientation="Horizontal" Margin="5">
            <TextBlock Text="{Binding Name}" FontWeight="Bold" Background="#444"/>
            <TextBlock Text="{Binding Description}" Margin="5,0,0,0"/>
        </StackPanel>
    </DataTemplate>

    <Style x:Key="DarkListViewStyle" TargetType="ListView">
            <Setter Property="Background" Value="#2d2d2d"/>
            <Setter Property="Foreground" Value="#D3D3D3"/>
            <Setter Property="BorderBrush" Value="#FF3F3F46"/>
            <Setter Property="BorderThickness" Value="1"/>
            <!-- Define the ControlTemplate -->
            <!-- Add other setters as needed to match your theme -->
        </Style>
    <Style x:Key="DarkListViewStyle2" TargetType="ListView">
        <Setter Property="Background" Value="#222222"/>
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="BorderBrush" Value="#222222"/>
        <Setter Property="BorderThickness" Value="1"/>
        
        <!-- Define the ControlTemplate -->
        <!-- Add other setters as needed to match your theme -->
    </Style>

    <!-- ListViewItem Style with Hover Effect -->
    <Style TargetType="ListViewItem">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeColor}"/>
                <!-- Selected Background Color -->
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#1F1F1F"/>
                <!-- Hover Background Color -->
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    
    
    
    
    
    
    
    <Style x:Key="CustomCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border x:Name="border" 
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="1" 
                    CornerRadius="5" 
                    Padding="0" 
                    SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ThemeColor}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ThemeColor}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#2D2D2D"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#2D2D2D"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>















    <!-- GridViewColumnHeader Style -->
    <!-- GridViewColumnHeader Style -->
    <Style TargetType="GridViewColumnHeader">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="#FF3F3F46"/>
        <Setter Property="Padding" Value="5"/>
        <!-- Other setters as needed -->
    </Style>

    <Style x:Key="ColoredBorderScrollViewer" TargetType="ScrollViewer">
        <Setter Property="BorderBrush" Value="Blue"/>
        <!-- Change 'Blue' to your desired color -->
        <Setter Property="BorderThickness" Value="1"/>
        <!-- Adjust thickness as needed -->
    </Style>


    <!-- Global Style for Buttons -->
    <Style TargetType="Button">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="#FF222222"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF444444"/>
                        </Trigger>
                        <!-- Trigger for Disabled State -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <!-- Adjust the background color for disabled state -->
                            <Setter Property="Foreground" Value="#FFAAAAAA"/>
                            <!-- Adjust the foreground color for disabled state -->
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <!-- Adjust the border color for disabled state if needed -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Global Style for Buttons -->
    <Style x:Key="CloseButton" TargetType="Button">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="#FF222222"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0,10,0,0">
                        <!-- Upper-right corner radius set to 10 -->
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF444444"/>
                        </Trigger>
                        <!-- Trigger for Disabled State -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <!-- Adjust the background color for disabled state -->
                            <Setter Property="Foreground" Value="#FFAAAAAA"/>
                            <!-- Adjust the foreground color for disabled state -->
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <!-- Adjust the border color for disabled state if needed -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Context Menu-->
    <!-- Context Menu Style -->
    <Style TargetType="ContextMenu">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel IsItemsHost="True" Margin="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem Style -->
    <Style TargetType="MenuItem">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="0,20,10,20"/>
        <Setter Property="FontSize" Value="18"/>
        <!-- Increased font size -->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" ContentSource="Icon" Margin="5,0,10,0" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="0,0,0,0" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>













    <!-- Button Hover Style -->
    <Style x:Key="TitleBarIconStyle" TargetType="Button">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="0">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#3C3C3C"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Button Hover Style -->
    <Style x:Key="TitleBarIconStyleCorner" TargetType="Button">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="0,10,0,0">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#3C3C3C"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Global Style for TextBox -->
    <Style TargetType="TextBox">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="#FF3F3F3F"/>
        <Setter Property="BorderBrush" Value="#FF3F3F3F"/>
        <!-- Set the Template for the TextBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5"
                            Padding="4,0,0,0">

                        <!-- Set CornerRadius to desired value for rounded corners -->
                        <ScrollViewer x:Name="PART_ContentHost"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Styles-->

    <!--  Dark Combobox -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
          x:Name="Border" 
          Grid.ColumnSpan="2"
          CornerRadius="5"
          Background="#FF333333"
          BorderBrush="#FF333333"
          BorderThickness="1" />
            <Border 
          Grid.Column="0"
          CornerRadius="0" 
          Margin="1" 
          Background="#FF333333" 
          BorderBrush="Transparent"
          BorderThickness="0,0,1,0" />
            <Path 
          x:Name="Arrow"
          Grid.Column="1"     
          Fill="White"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
        />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                    Name="ToggleButton" 
                    Template="{StaticResource ComboBoxToggleButton}" 
                    Grid.Column="2" 
                    Focusable="false"
                    IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                    ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    Margin="23,3,23,3"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                    Style="{x:Null}" 
                    Template="{StaticResource ComboBoxTextBox}" 
                    HorizontalAlignment="Left" 
                    VerticalAlignment="Center" 
                    Margin="3,3,23,3"
                    Focusable="True" 
                    Background="#FF3F3F3F"
                    Foreground="Green"
                    Visibility="Hidden"
                    IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                    Name="Popup"
                    Placement="Bottom"
                    IsOpen="{TemplateBinding IsDropDownOpen}"
                    AllowsTransparency="True" 
                    Focusable="False"
                    PopupAnimation="Slide">

                            <Grid Name="DropDown"
                      SnapsToDevicePixels="True"                
                      MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                        x:Name="DropDownBorder"
                        Background="#FF3F3F3F"

                        BorderThickness="1"
                        BorderBrush="#FF3F3F3F"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                      Padding="2"
                      SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!--  Dark Combobox -->
    <ControlTemplate x:Key="ComboBoxButtonToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
          x:Name="Border" 
          
          CornerRadius="5"
          Background="#FF333333"
          BorderBrush="#FF333333"
          BorderThickness="1" />
            <Border 
          Grid.Column="1"
          CornerRadius="0" 
          Margin="1" 
          Background="#FF333333" 
          BorderBrush="Transparent"
          BorderThickness="0,0,1,0" />
            <Path 
          x:Name="Arrow"
          Grid.Column="1"     
          Fill="White"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
        />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxButtonTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="ComboBoxButton" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">          
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="23,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="#FF3F3F3F"
                            Foreground="Green"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="#FF3F3F3F"

                                    BorderThickness="1"
                                    BorderBrush="#FF3F3F3F"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="ComboBoxButtonItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                      Padding="2"
                      SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Toggle Switch Style for CheckBox -->

    <Style x:Key="MetroToggleSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="#FF009688"/>
        <Setter Property="Background" Value="#FFB2DFDB"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="10" Padding="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="Switch" Width="40" Height="20" Background="{TemplateBinding Foreground}" CornerRadius="10" HorizontalAlignment="Left" Margin="0,0,0,0"/>
                            <ContentPresenter HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="1"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Switch" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Switch" Property="HorizontalAlignment" Value="Left"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFE0F2F1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFBDBDBD"/>
                            <Setter Property="Foreground" Value="#FF9E9E9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
    <Style x:Key="MinimalToggleSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border Background="Transparent" Width="60" Height="25" CornerRadius="12.5">
                        <Grid>
                            <Border x:Name="ToggleBackground" Background="Transparent" BorderBrush="Gray" BorderThickness="2" CornerRadius="12.5"/>
                            <Ellipse x:Name="ToggleCircle" Width="21" Height="21" Fill="Black" HorizontalAlignment="Left" Margin="2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ToggleBackground" Property="Background" Value="Blue"/>
                            <Setter TargetName="ToggleCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="ToggleCircle" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="ToggleCircle" Property="Margin" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RefinedToggleSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border Background="Transparent" Width="60" Height="25" CornerRadius="12.5">
                        <Grid>
                            <Border x:Name="ToggleBackground" Background="Transparent" BorderBrush="Black" BorderThickness="2" CornerRadius="12.5"/>
                            <Ellipse x:Name="ToggleCircle" Width="16" Height="16" Fill="Black" HorizontalAlignment="Left" Margin="3"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ToggleBackground" Property="Background" Value="Blue"/>
                            <Setter TargetName="ToggleBackground" Property="BorderBrush" Value="Blue"/>
                            <Setter TargetName="ToggleCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="ToggleCircle" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="ToggleCircle" Property="Margin" Value="3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DarkModeToggleSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border Background="Transparent" Width="50" Height="25" CornerRadius="12.5">
                        <Grid>
                            <Border x:Name="ToggleBackground" Background="Transparent" BorderBrush="White" BorderThickness="1" CornerRadius="12.5"/>
                            <!-- Handler is white in the off state -->
                            <Ellipse x:Name="ToggleCircle" Width="15" Height="15" Fill="White" HorizontalAlignment="Left" Margin="5"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ToggleBackground" Property="Background" Value="{DynamicResource ThemeColor}"/>
                            <Setter TargetName="ToggleBackground" Property="BorderBrush" Value="{DynamicResource ThemeColor}"/>
                            <Setter TargetName="ToggleCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="ToggleCircle" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="ToggleCircle" Property="Margin" Value="5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ListView Style -->
    <Style TargetType="ListView" x:Key="NavigationListViewStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>

        <Setter Property="SelectedIndex" Value="0"/>
        <Setter Property="Margin" Value="0,150,0,0"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="Margin" Value="5"/>
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <Border CornerRadius="10" Padding="5" Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <!-- Triggers for hover and selection effects -->
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#2B2B2B" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#2B2B2B" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Height="40">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="5"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Background="{DynamicResource ThemeColor}" Width="5" Height="30" CornerRadius="2.5" 
                            Visibility="{Binding IsActive, Converter={StaticResource BoolToVisibilityConverter}}"
                            VerticalAlignment="Center"/>
                        <Image Grid.Column="1" Width="24" Height="24" 
                           Source="{Binding Icon, Converter={StaticResource DynamicSvgConverter}}" Margin="10,0,10,0"/>
                        <TextBlock Grid.Column="2" Text="{Binding Text}" VerticalAlignment="Center" Margin="10" Foreground="White"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default RadioButton-->
    <Style TargetType="RadioButton">
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse x:Name="OuterCircle" Width="20" Height="20" Stroke="{TemplateBinding Foreground}" StrokeThickness="2"/>
                        <Ellipse x:Name="InnerCircle" Width="10" Height="10" Fill="{TemplateBinding Foreground}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterCircle" Property="Stroke" Value="#FF5593FF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerCircle" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF707070"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Test RadioButton -->
    <Style x:Key="ModernRadioButton" TargetType="RadioButton">
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle" Storyboard.TargetProperty="Opacity" To="0" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse x:Name="OuterCircle" Width="20" Height="20" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Grid.Column="0"/>
                        <Ellipse x:Name="InnerCircle" Width="10" Height="10" Fill="{DynamicResource ThemeColor}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0"/>
                        <ContentPresenter Grid.Column="1" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" TextElement.Foreground="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterCircle" Property="Stroke" Value="#FF5593FF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerCircle" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF707070"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Default CheckBox -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBoxBorder" Width="20" Height="20" Background="Transparent" BorderBrush="#FF707070" BorderThickness="1" CornerRadius="2"/>
                        <Path x:Name="CheckMark" Width="10" Height="8" Stretch="Fill" Visibility="Collapsed" StrokeThickness="2" Stroke="#FF707070" Data="M 1,4.5 L 4,7 L 9,1" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        <ContentPresenter Grid.Column="1" Margin="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" TextElement.Foreground="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="Background" Value="#FFDDDDDD"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource ThemeColor}"/>
                            <Setter TargetName="CheckMark" Property="Stroke" Value="#FFFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF707070"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="FavoriteButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FilledStar">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="Visible"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FilledStar">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="OutlineStar" Data="M 10,1 L 12,7 L 18,7 L 13,11 L 15,17 L 10,13 L 5,17 L 7,11 L 2,7 L 8,7 Z" Stroke="Black" Fill="Transparent"/>
                        <Path x:Name="FilledStar" Data="M 10,1 L 12,7 L 18,7 L 13,11 L 15,17 L 10,13 L 5,17 L 7,11 L 2,7 L 8,7 Z" Fill="Gold" Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!-- FavoriteIcon Checkbox-->
    <Style x:Key="FavoriteCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FilledStar" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FilledStar" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FilledStar" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <!-- Padding sets the star Size-->

                        <Border Background="Transparent" Padding="12">

                            <Viewbox HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <!-- Adjust the ScaleX and ScaleY values to scale the star size -->
                                        <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                    </Grid.LayoutTransform>
                                    <Path x:Name="OutlineStar"
                                          Data="M 10,1 L 12,7 L 18,7 L 13,11 L 15,17 L 10,13 L 5,17 L 7,11 L 2,7 L 8,7 Z" 
                                          Stroke="#DDDDDD" 
                                          Fill="Transparent"/>
                                                                <Path x:Name="FilledStar" 
                                          Data="M 10,1 L 12,7 L 18,7 L 13,11 L 15,17 L 10,13 L 5,17 L 7,11 L 2,7 L 8,7 Z" 
                                          Fill="Gold" 
                                          Visibility="Collapsed"/>
                                </Grid>
                            </Viewbox>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="FilledStar" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Modern ProgressBar Style -->
    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource ThemeColor}"/>
            <!-- Vibrant blue for progress -->
            <Setter Property="Background" Value="#FF333333"/>
            <!-- Dark background -->
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Border CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="PART_Track">
                            <Rectangle x:Name="PART_Indicator" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" RadiusX="10" RadiusY="10">
                                <Rectangle.Width>
                                    <MultiBinding Converter="{StaticResource ProgressBarWidthConverter}">
                                        <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </Rectangle.Width>
                            </Rectangle>
                        </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    
    <!-- ScrollBar Style -->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="#FF2D2D30"/>
        <Setter Property="Foreground" Value="{DynamicResource ThemeColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" Opacity="0.5"/>
                        <Track x:Name="PART_Track" IsDirectionReversed="False">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" Opacity="0"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Background="{TemplateBinding Foreground}" BorderThickness="0">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Rectangle Fill="{TemplateBinding Background}" RadiusX="4" RadiusY="4"/>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" Opacity="0"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="False"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Height" Value="8"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="8"/>
                <Setter Property="Height" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Modern Slider Style -->
    <Style TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Track x:Name="PART_Track">
                            <!-- Track line before the Thumb -->
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Background="#FFD3D3D3" Opacity="1" IsHitTestVisible="False"/>
                            </Track.DecreaseRepeatButton>
                            <!-- Thumb -->
                            <Track.Thumb>
                                <Thumb>
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="Thumb">
                                            <Ellipse Fill="{TemplateBinding Background}" Width="12" Height="12"/>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <!-- Track line after the Thumb -->
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Background="#FFD3D3D3" Opacity="1" IsHitTestVisible="False"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- GroupBox Style -->
    <Style TargetType="GroupBox">
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="Background" Value="#FF222222"/>
        <Setter Property="BorderBrush" Value="#FF222222"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5,5,0,0"
                                Padding="5">
                                <ContentPresenter ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"/>
                            </Border>
                            <ContentPresenter Grid.Row="1"
                                          Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Listbox -->
    <!-- Listbox with Rounded Corners -->
    <Style TargetType="ListBox">
        <Setter Property="Background" Value="#FF2D2D30"/>
        <Setter Property="BorderBrush" Value="#FF454545"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <!-- Set CornerRadius here -->
                        <ScrollViewer Padding="{TemplateBinding Padding}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="#FF2D2D30"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="BorderBrush" Value="#FF454545"/>
  
        <Setter Property="RowBackground" Value="#FF333333"/>
        <Setter Property="AlternatingRowBackground" Value="#FF3E3E42"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#FF454545"/>
        <Setter Property="VerticalGridLinesBrush" Value="#FF454545"/>
        <Setter Property="ColumnHeaderHeight" Value="32"/>
        <Setter Property="RowHeight" Value="24"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <!-- Add a Template Setter -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGrid">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <!-- Set the CornerRadius here -->
                        <ScrollViewer Padding="{TemplateBinding Padding}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#FF007ACC"/>
                            <Setter Property="Foreground" Value="#FFFFFF"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#FF3E3E42"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Setter Property="BorderThickness" Value="0,0,0,1"/>
                    <Setter Property="BorderBrush" Value="#FF454545"/>
                    <Setter Property="Height" Value="32"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="FontSize" Value="14"/>
                    <Setter Property="FontWeight" Value="SemiBold"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Date Picker -->
    <Style TargetType="DatePicker">
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Background" Value="#FF2D2D30"/>
        <Setter Property="BorderBrush" Value="#FF454545"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePicker">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <DatePickerTextBox x:Name="PART_TextBox"
                                           Grid.Column="0"
                                           Foreground="{TemplateBinding Foreground}"
                                           Background="Transparent"
                                           BorderThickness="0"
                                           FontSize="{TemplateBinding FontSize}"
                                           FontFamily="{TemplateBinding FontFamily}"/>
                            <Button x:Name="PART_Button"
                                Grid.Column="1"
                                Foreground="{TemplateBinding Foreground}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                FontFamily="Segoe MDL2 Assets"
                                Content="&#xE787;"
                                FontSize="12"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="DatePickerTextBox">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <TextBox x:Name="PART_TextBox"
                         Background="{TemplateBinding Background}"
                         Foreground="{TemplateBinding Foreground}"
                         BorderThickness="{TemplateBinding BorderThickness}"
                         FontSize="{TemplateBinding FontSize}"
                         FontFamily="{TemplateBinding FontFamily}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Calendar styles -->
    <Style TargetType="Calendar">
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="Background" Value="#FF222222"/>
        <Setter Property="BorderBrush" Value="Transparent"/>

    </Style>


    <Style TargetType="CalendarItem">
        <Setter Property="Background" Value="Red"/>
        <Setter Property="Foreground" Value="White"/>

    </Style>
    <Style TargetType="CalendarButton">
        <Setter Property="Background" Value="Red" />
        <Setter Property="Foreground" Value="White"/>
        
    </Style>


    <Style TargetType="CalendarDayButton">
        <Setter Property="Background" Value="Red"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeView Style -->
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="#2d2d2d"/>
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="BorderBrush" Value="#FF3F3F46"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- TreeViewItem Style -->
    <!-- TreeViewItem Style with Expand/Collapse functionality -->
    <Style TargetType="TreeViewItem">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Converter={StaticResource LevelToIndentConverter}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <StackPanel>
                        <Border x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <!-- ToggleButton for expand/collapse -->
                                <ToggleButton x:Name="Expander" Width="16" Height="16" 
                              Content="+" Foreground="White" Background="Transparent"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                                <!-- Adjust ContentPresenter to be in the second column -->
                                <ContentPresenter ContentSource="Header" Margin="4,0,0,0" Grid.Column="1"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!-- Customizing the appearance for selected item -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#FF3F3F46" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <!-- Customizing the appearance when the mouse is over the item -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#1F1F1F" TargetName="Bd"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <!-- DataTrigger to change the content of the ToggleButton -->
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="Expander" Property="Content" Value="-"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="Expander" Property="Content" Value="+"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom Style for Specific ListView -->
    <Style x:Key="CustomListViewStyle" TargetType="ListView">
        <Setter Property="Background" Value="#2d2d2d"/>
        <Setter Property="Foreground" Value="#D3D3D3"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Background="{TemplateBinding Background}">
                        <ScrollViewer Focusable="False">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom Style for ListViewItem to make items bigger -->
    <Style x:Key="CustomListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="20"/>
        <!-- Adjust padding to make items bigger -->
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeColor}"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#1F1F1F"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>